---
- name: leapp-unmount-btrfs-shares | Set leapp-entry if leapp-report contains this inhibitor
  ansible.builtin.set_fact:
    leapp_entry: "{{ item }}"
  loop: "{{ leapp_report_json.entries }}"
  when: item.key == entry_key

- block:
    # Gives us a list of BTRFS mounts unique to this host, and will be used with the ansible.posix.mount module to unmount BTRFS mounts
    - name: Find all BTRFS mounts
      ansible.builtin.set_fact:
        btrfs_mounts: "{{ ansible_mounts | default([]) | selectattr('fstype', 'in', ['btrfs']) | list }}"

    - name: Read /etc/fstab content
      ansible.builtin.slurp:
        path: /etc/fstab
      register: fstab_content

    # Returns a list of all valid BTRFS entries in /etc/fstab, excludes any commented-out lines
    - name: Decode and parse BTRFS entries from /etc/fstab
      ansible.builtin.set_fact:
        btrfs_entries: "{{ fstab_content.content | b64decode | split('\n') | select('search', 'btrfs') | reject('search', '#') | list }}"

    - name: Comment out BTRFS entries in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: "^{{ item | regex_escape }}"
        line: "#{{ item }}"
      loop: "{{ btrfs_entries }}"

    # Task to unmount all active mounts defined in btrfs_mounts
    - name: Unmount all mounts defined in btrfs_mounts
      ansible.posix.mount:
        path: "{{ item['mount'] }}"
        state: unmounted
      loop: "{{ btrfs_mounts }}"
  when:
    - leapp_entry is defined
    - leapp_entry.key == entry_key
    - ansible_fqdn == leapp_entry.hostname
